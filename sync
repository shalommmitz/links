#!/usr/bin/env python3
import pysftp, yaml, socket, glob
import utils

print("Launching")
###### init vars
local_host_name = socket.gethostname()
local_links_fn = "links_"+ local_host_name +".yml"
params = yaml.safe_load(open("params.yml"))
sftpHostname = params["sftpHostName"]
Username = params["userName"]
Password = params["password"]
affiliated_hosts = params["affiliated_hosts"]

# Dry run - load all yaml to catch any errors early - results are ignored
new_links_list = utils.gen_new_links_list()

###### Connect
sftp = pysftp.Connection(host=sftpHostname, username=Username, password=Password)
print("    Connection successfully established.")
# Switch to a remote directory
sftp.cwd('/downloads/links')
#Upload the local links file
print(f'    Uploading local links file "{local_links_fn}"')
sftp.put(local_links_fn)

#Upload the affiliated hosts file(s)
if len(affiliated_hosts):
    print(f'    Uploading affiliated-hosts links file(s) {affiliated_hosts}')
    for ah in affiliated_hosts:
        fn = "links_"+ ah +".yml"
        sftp.put(fn)

# Download all the non-native links files
directory_structure = sftp.listdir_attr()
for attr in directory_structure:
    fn = attr.filename
    should_dl_file = True
    if not fn.startswith("links_") and fn.endswith(".yml"):
        should_dl_file = False
    if fn==local_links_fn:
        should_dl_file = False
    host = fn[len("links_"):-len(".yml")]
    if host in affiliated_hosts:
        should_dl_file = False
    if should_dl_file:
        print(f'    Downloading remote links file "{fn}"')
        sftp.get(fn)
sftp.close()
            
print("    Generating unified HTML links file")
links = { }
new_links_list = utils.gen_new_links_list()

for new_links in new_links_list:
    for item in new_links.keys():
        if item==item.upper():
            c_item = item
        else:
            c_item = item.capitalize()
        if c_item in links.keys():
           links[c_item].update(new_links[item])
        else:
           links[c_item] = new_links[item]

page = '''<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Links</title>
</head>
<body>
'''                          
item_keys = list(links.keys())
item_keys.sort(key=lambda y: y.lower())
for i in item_keys:
    page += f'{i} '
    item = links[i]
    if type(item)!=type({}):
        print(f'ERROR: Part of the item "{i}" is not a directory - Aborting')
        exit()
    # print(type(item), item)
    
    for description in item.keys():
        link = item[description]
        page += f'<a href="{link}">{description}</a>&nbsp;\n'
    page += '<br>'
page += '''
</body>
</html>
'''
#print(page)
open("links.html", 'w').write(page)
print("Done.")
